name: Release

on:
  push:
    branches: [ main ]
    paths: [ 'src/realtimex_social_media_posts_tools/__init__.py' ]
  workflow_dispatch:

jobs:
  tag:
    name: Create Git Tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      tag_exists: ${{ steps.check_tag.outputs.tag_exists }}
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: echo "VERSION=$(python -c "import re; print(re.search(r'__version__\s*=\s*[\"\'](.*?)[\"\']', open('src/realtimex_social_media_posts_tools/__init__.py').read()).group(1))")" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.get_version.outputs.VERSION }}" >/dev/null 2>&1; then
            echo "Tag v${{ steps.get_version.outputs.VERSION }} already exists, skipping release"
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Git Tag
        if: steps.check_tag.outputs.tag_exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build sdist and wheel
    needs: tag
    runs-on: ubuntu-latest
    if: needs.tag.outputs.tag_exists == 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Set up uv
        uses: astral-sh/setup-uv@v4

      - name: Build package
        run: |
          uv build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

  publish-pypi:
    name: Publish to PyPI
    needs: [tag, build]
    runs-on: ubuntu-latest
    if: needs.tag.outputs.tag_exists == 'false'
    env:
      PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Publish package distributions to PyPI
        if: env.PYPI_API_TOKEN != ''
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: dist

  github-release:
    name: Create GitHub Release
    needs: [tag, build]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    if: needs.tag.outputs.tag_exists == 'false'
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Upload files to existing release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.tag.outputs.version }}
          files: |
            dist/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}